---
title: "Report"
author: "Kate Esbenshade, Luke McFaul, and Mack Smith"
format: html
vignette: >
  %\VignetteIndexEntry{Report}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

# STATS 290 Final Project Report

## Introduction

California has a unique electricity market structure that is different from other states in the US. There are many integrated renewables and therefore high fluctuations in electricity prices. Also, because of the location of generation sources and electricity demand, there is often congestion in the transmission system, which can lead to higher electricity prices in certain locations (different locational marginal prices, or LMPS). We wanted to create a project to visualize these differences in price and allow users to understand and analyze LMP differences and congestion.

### Problem Statement

Currently, there is a website called gridstatus.io that allows you to view current electricity prices in California and around the country. However, without paying the the premium version, there is no way to view historical data. Additionally, you cannot analyze the differences in prices, or prices over time or by season.

We wanted to create a user friendly way to conduct analysis on California electricity prices in order to undestand the past and plan for the future. 

### Project Goals and Output

1. Develop a CAISO API wrapper to retrieve LMP data for specific nodes within the CAISO region.
2. Clean and transform the LMP data into a usable format for analysis and visualization.
3. Create visualizations that allow users to explore and analyze the LMP data, including price differences between nodes, temporal trends, and seasonal patterns. Combine these viusals into functions that export pdfs of analyses of prices and trends. 
4. Create a Shiny App that allows users to interact with the node data and transmission line visuals and explore the data in a user-friendly manner.

## CAISO Client (Mack)

In order to \_\_\_\_ , we first need to find a way to collect LMP data and clean it such that it's well-organized for analyses and visualizations.

Initially we had planned to develop an API wrapper for the ISO New England (ISONE) API and use its Locational Marginal Price (LMP) data for our visualizations and analysis. However, after examining the available data for ISONE, we encountered a significant issue: the LMP data was only provided at a state-level scope, rather than being available for specific nodes within the system. This node-level granularity is essential for our project, as we wanted to create detailed visualizations that reflect the price fluctuations at specific locations. Additionally, even if we could find node-level LMP data, there was no available geographical data for the locations of the nodes, which further hindered our ability to achieve the primary goal of our project.

After some investigation, we shifted our focus to the California Independent System Operator (CAISO) region, as it offered node-level LMP data and geographical data for those nodes, which we could use for our visualizations. The GridStatus API, which provides access to energy data from various grid operators, including CAISO, proved to be the solution we needed. We decided to adapt our project to leverage this API and pivot from ISONE to CAISO for the remainder of the work.

Now using the GridStatus API, we were able to create a user-friendly wrapper to retrieve LMP data for CAISO nodes at various temporal granularities, such as 5-minute and 15-minute intervals between each data point. This allows us to capture the dynamic nature of energy prices at a much finer resolution than what was available through ISONE.

### Creating CAISO Client:

To get started with the CAISO data, the user first needs to generate an API key for the GridStatus API. Once the API key is acquired, they can create a client object that will facilitate retrieving the data. Below is an example of how to create the client:

```{r}
#| eval: false

# Create CAISO Client
client <- CAISOWrapR::create_caiso_client(api_key = "your_api_key")
```

Alternatively, you can set the environment variable `GRIDSTATUS_API_KEY` to your API key and then create the client.

```{r}
#| eval: false

# Set environment variable
Sys.getenv(GRIDSTATUS_API_KEY = "your_api_key")

# Create CAISO Client
client <- CAISOWrapR::create_caiso_client()
```

Once the client object has been created, it is ready to be used for fetching LMP data from CAISO. The wrapper also includes built-in error checking to ensure that any issues with the API requests—such as invalid API keys, network problems, or incorrect client configurations—are caught early. Specifically, the `validate_client` function checks that the client is properly configured with the correct class and required fields (host and API key), while the `build_api_request` function ensures that the request is constructed correctly and includes comprehensive error handling for issues that may arise during the request building process. Additionally, the `execute_api_request` function handles errors during the execution of the API request, such as non-200 status codes or response parsing failures. This built-in error handling makes it easier for the user to identify and debug any issues that may occur when interacting with the CAISO API.

### Fetching LMP Data:

The core function of the API wrapper is `fetch_lmp_data()`. This function allows the user to retrieve LMP data for specific CAISO nodes within a defined time range. At a minimum, the user needs to pass in the client object they created, and the function will retrieve the relevant LMP data for the specified time period. However, users can also provide additional parameters to refine their queries, such as specifying the number of data points to return with the `limit` parameter.

Here’s an example of how to use the `fetch_lmp_data()` function to retrieve LMP data for a given time range:

```{r}
#| eval: false

# Fetch LMP data for CAISO nodes between specific start and end times
lmp_data <- fetch_lmp_data(client, 
                           start_time = "2024-12-01 00:00:00", 
                           end_time = "2024-12-01 01:00:00", 
                           limit = 100)
```

In this example, the user specifies the start and end times, and limits the number of data points returned to 100. The function is flexible, allowing the user to pass in other parameters for more specific data retrieval. For example, one could specify a particular location or market by passing in additional arguments such as `location` and `market`.

```{r}
#| eval: false

# Fetch LMP data for a specific location and market
lmp_data <- fetch_lmp_data(client, 
                           start_time = "2024-12-01 00:00:00", 
                           end_time = "2024-12-01 01:00:00", 
                           filter_column = "location",
                           filter_value = "12STREET_LNODEEET1",
                           filter_operator = "=",
                           limit = 100)
```

In this case, the user filters for a specific node location in the `location` column, which allows the function to return LMP data specifically for node's location during the specified time range.

Beyond this, the `fetch_lmp_data()` function offers advanced options to tailor data retrieval to specific needs. Users can select temporal resolutions, apply filters on attributes such as `location` and `market`, and manage pagination for large datasets. Additional features, such as selective column retrieval, data resampling, and time zone handling, provide flexibility and efficiency, making this API wrapper a powerful tool for analyzing CAISO’s LMP data.

### Data Transformation and Cleaning:

One of the benefits of the `fetch_lmp_data()` function is that it not only retrieves the raw LMP data but also cleans and transforms it into a usable format. The function automatically converts time-related columns into the correct data types, such as `POSIXct` for date-time values, which allows for easier manipulation in subsequent analyses. Additionally, any missing or erroneous data points are handled gracefully, ensuring that the final dataset is ready for analysis and visualization.

For instance, when the LMP data is returned, the function will perform the following operations:

-   Convert the `timestamp` column to `POSIXct` format for easier time-based filtering.

-   Ensure that the `LMP` values are numeric, handling any invalid entries by replacing them with `NA` where necessary.

By taking care of these data preprocessing tasks, `fetch_lmp_data()` allows the user to focus on analysis and visualization without worrying about cleaning the data first.

### Conclusion

With the CAISO API wrapper now in place, users can easily retrieve LMP data for specific nodes within the CAISO region and leverage that data for in-depth analysis and visualization. The `fetch_lmp_data()` function is flexible and user-friendly, allowing for custom queries while automatically handling data cleaning and transformation. In the next sections, we'll examine the functions within the **CAISOWrapR** and see how they make use of the data our API wrapper and analyze/visualize them.

## Data Fetching and Visualizations (Kate and Luke)

### Data Fetching
Users can use the `fetch_lmp_data()` function to retrieve LMP data for specific CAISO nodes within a defined time range. We also created `pulldata_instance()` and `pulldata_node()` which allow users to pull data for a specific instance or node respectively. 

`pulldata_instance()` allows users to pull data for a specific instance (15 minute interval) for every node in the CAISO region. Users can run this by inputting a date and time and API key, and then saving it to a dataframe. Data in this output allows users to then run the following functions for data visualiaztions.

`pulldata_node()` allows users to pull data for a specific node (location) over a year of 15 minute intervals. Users can run this by inputting a city or node, year, and API key, and then saving it to a dataframe. Data in this output allows users to then run the following functions for data visualizations.

### Data Visualization and Analysis

`analyze_single_instance_data()` allows users to analyze the data from `pulldata_instance()` and returns a short pdf of analysis. It runs the other functions, `summarize_lmps()` and `price_violin()` and then returns a pdf with the results. This allows users to understand the distribution of prices at a singular instance (15 minute interval).

`analyze_single_node_data()` allows users to analyze the data from `pulldata_node()` and returns a pdf of analysis. It runs the other functions, `visualize_node()`, `visualize_node_seasonal()`, `visualize_node_congestion()`, `visualize_node_seasonal_congestion()`, `visualize_node_losses()`, `visualize_node_seasonal_losses()`, `visualize_node_demand()`, `visualize_node_demand_without_high_demand_hours()`, `visualize_node_demand_congestion()`, `visualize_node_demand_without_high_demand_hours_congestion()` and then returns a pdf with the results. This allows users to understand the distribution of prices at a singular node (location). 

`analyze_two_node_data()` allows users to analyze the data from `pulldata_node()` for two nodes and returns a pdf of analysis comparing the two. It runs the other functions, `compare_lmps_visual`, `compare_lmps_visual_seasonal`, `compare_congestion_visual`, `compare_congestion_visual_seasonal`, `compare_losses_visual`, and `compare_losses_visual_seasonal` and then returns a pdf with the results. This allows users to understand the distribution of prices at two nodes (locations) and compare them.

### Conclusion

Generally, the data analysis functions allow users to better understand the California electricity prices. They can choose either a specific instance or node to analyze and then run the functions to get a pdf of the results. Or, they can run the individual, smaller functions to see specific results. This allows users to understand the current and historical electricity prices in California better.

## Shiny App (Luke)

The Shiny App allows users to interact with the data and visualizations in a user-friendly manner. Users can select an instance and download the data using `pulldata_instance()`. Or, they can use the baseline instance data, which is a typical day in California or a predefined instance of a particularly high demand day. Then, they can run `CA_map()` to generate an interactive Shiny app that allows users to explore the data and the transmission lines. After running the app, you can see LMPs, congestion prices, or loss pricing, and look at all transmission lines or just the major ones. 

With this app, users can interact with the data and see the differences in prices and congestion in California.


## Use Case

To

```{r}
# Load CAISOWrapR
library(CAISOWrapR)

# Create environment variable for GridStatus API key
Sys.setenv(GRIDSTATUS_API_KEY = "c92f5de270cc4ec2ab3c4da6f8a53399")

# Create CAISO Client
client <- create_caiso_client()
```

## Future Enhancements and Extensions
For the future, we think it would enhance the package to be able to visualize congestion on individual transmission lines. This would allow users to easily see where congestion is occuring and how it is affecting prices.

Another addition to the project is allow users to understand potential differences of revenue or value of renewable energy projects depending on their location and generation patterns. This would allow for users to understand the value of different energy generating facilties, and how it is affected by both location. 